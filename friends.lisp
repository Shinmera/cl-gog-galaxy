(in-package #:org.shirakumo.fraf.gog-galaxy)

(defmethod friend-p ((user user))
  (gog ifriends-is-friend (handle 'friends) (id user)))

(defmethod in-same-game-p ((user user))
  (gog ifriends-is-user-in-the-same-game (handle 'friends) (id user)))

(defmethod persona-name ((self (eql T)))
  (gog ifriends-get-persona-name (handle 'friends)))

(defmethod persona-state ((self (eql T)))
  (gog ifriends-get-persona-state (handle 'friends)))

(defmethod persona-name ((user user))
  (gog ifriends-get-friend-persona-name (handle 'friends) (id user)))

(defmethod persona-state ((user user))
  (gog ifriends-get-friend-persona-state (handle 'friends) (id user)))

(defmethod avatar-url ((user user))
  (gog ifriends-get-friend-avatar-url (handle 'friends) (id user)))

(defmethod avatar ((user user) &key (size :medium) buffer)
  (unless (gog ifriends-is-friend-avatar-image-rgbaavailable (handle 'friends) (id user) size)
    (with-listener* (listener)
          (gog ifriends-request-user-information (handle 'friends) (id user) size listener)
      (user-information-retrieve-success (r-user)
        (when (eq user r-user) (return-from listener)))
      (user-information-retrieve-failure (r-user failure)
        (when (eq user r-user) (error "Failed to get user avatar: ~a" failure)))))
  (unless buffer
    (setf buffer (make-array (* 512 512 4) :element-type '(unsigned-byte 8))))
  (cffi:with-pointer-to-vector-data (ptr buffer)
    (gog ifriends-get-friend-avatar-image-rgba (handle 'friends) (id user) size ptr (length buf)))
  buffer)

(defmethod befriend ((user user))
  (with-listener* (listener)
        (gog ifriends-send-friend-invitation (handle 'friends) (id user) listener)
    (friend-invitation-send-success (r-user)
      (when (eq user r-user) (return-from listener user)))
    (friend-invitation-send-failure (r-user failure)
      (when (eq user r-user) (error "Failed to send friend request: ~a" failure)))))

(defmethod unfriend ((user user))
  (with-listener* (listener)
        (gog ifriends-delete-friend (handle 'friends) (id user) listener)
    (friend-delete-success (r-user)
      (when (eq user r-user) (return-from listener user)))
    (friend-delete-failure (r-user failure)
      (when (eq user r-user) (error "Failed to delete friend: ~a" failure)))))

(defmethod rich-presence ((user user) &optional key)
  (let ((interface (handle 'friends)))
    (with-listener* (listener)
          (gog ifriends-request-rich-presence interface (id user) listener)
      (rich-presence-retrieve-success (r-user)
        (when (eq user r-user)
          (if key
              (gog ifriends-get-rich-presence (handle 'friends) key (id user))
              (loop for i from 0 below (gog ifriends-get-rich-presence-count interface (id user))
                    for key = (gog ifriends-get-rich-presence-key-by-index (handle 'friends) i (id user))
                    for val = (gog ifriends-get-rich-presence interface key (id user))
                    collect (cons key val)))))
      (rich-presence-retrieve-failure (r-user failure)
        (when (eq user r-user) (error "Failed to retrieve rich presence: ~a" failure))))))

(defmethod invite ((user user) connection-string)
  (with-listener* (listener)
        (gog ifriends-send-invitation (handle 'friends) (id user) connection-string listener)
    (invitation-send-success (r-user r-connection)
      (when (and (eq user r-user) (string= connection-string r-connection))
        (return-from listener user)))
    (invitation-send-failure (r-user r-connection failure)
      (when (and (eq user r-user) (string= connection-string r-connection))
        (error "Failed to send invite: ~a" failure)))))

(defclass friend-request ()
  ((id :initarg :id :reader id)
   (send-time :initarg :send-time :reader send-time)))

(defmethod accept ((request friend-request))
  (with-listener* (listener)
        (gog ifriends-respond-to-friend-invitation (handle 'friends) (id request) T listener)
    (friend-invitation-respond-to-success (user accept)
      (when (= (id user) (id request)) (return-from listener user)))
    (friend-invitation-respond-to-failure (user failure)
      (when (= (id user) (id request)) (error "Failed to accept friend request: ~a" failure)))))

(defmethod reject ((request friend-request))
  (with-listener* (listener)
        (gog ifriends-respond-to-friend-invitation (handle 'friends) (id request) NIL listener)
    (friend-invitation-respond-to-success (user accept)
      (when (= (id user) (id request)) (return-from listener user)))
    (friend-invitation-respond-to-failure (user failure)
      (when (= (id user) (id request)) (error "Failed to reject friend request: ~a" failure)))))

(define-interface friends gog:friends
  (default-avatar-sizes ()
    (gog ifriends-get-default-avatar-criteria handle))

  ((setf default-avatar-sizes) (sizes)
    (gog ifriends-set-default-avatar-criteria handle sizes)
    sizes)
  
  (list-friends ()
    (with-listener* (listener)
          (gog ifriends-request-friend-list handle listener)
      (friend-list-retrieve-success ()
        (loop for i from 0 below (gog ifriends-get-friend-count handle)
              collect (ensure-user (gog ifriends-get-friend-by-index handle i))))
      (friend-list-retrieve-failure (failure)
        (error "Failed to retrieve friend list: ~a" failure))))

  (list-friend-requests ()
    (with-listener* (listener)
          (gog ifriends-request-friend-invitation-list handle listener)
      (friend-invitation-list-retrieve-success ()
        (loop for i from 0 below (gog ifriends-get-friend-invitation-count handle)
              collect (cffi:with-foreign-objects ((id 'gog:id) (time :uint32))
                        (gog ifriends-get-friend-invitation-by-index handle i id time)
                        (make-instance 'friend-request :id (cffi::mem-ref id 'gog:id)
                                                       :send-time (to-universal-time (cffi:mem-ref time :uint32))))))
      (friend-invitation-list-retrieve-failure (failure)
        (error "Failed to retrieve friend request list: ~a" failure))))

  (rich-presence (&optional key)
    (rich-presence (ensure-user T) key))

  ((setf rich-presence) (value key)
    (with-listener* (listener)
          (etypecase value
            (string (gog ifriends-set-rich-presence handle key value listener))
            (null (gog ifriends-clear-rich-presence handle listener)))
      (rich-presence-change-success ()
        (return-from listener value))
      (rich-presence-change-failure (failure)
        (error "Failed to update rich presence: ~a" failure))))

  (find-user (name)
    (with-listener* (listener)
          (gog ifriends-find-user handle name listener)
      (user-find-success (r-name user)
        (when (string= name r-name) (return-from listener user)))
      (user-find-failure (r-name failure)
        (when (string= name r-name) (error "Failed to find user: ~a" failure)))))

  (show-invite-overlay (connection-string)
    (gog ifriends-show-overlay-invite-dialog handle connection-string)))
